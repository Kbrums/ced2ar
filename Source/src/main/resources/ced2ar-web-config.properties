baseXDB=${basex.db}
baseXReaderHash=${basex.reader.hash}
baseXWriterHash=${basex.writer.hash}
baseXAdminHash=${basex.admin.hash}
basexGenerateRandomPasswords=${basex.generate.random.passwords}
baseXAllowChangePasswords=${basex.allow.change.passwords}
 
#Email to send the bugReport to
bugReportEmail=${bug.report.email}
bugReportSender=${bug.report.sender}
bugReportPwd=${bug.report.pwd}
bugReportEnable=${bug.report.enable}

#Name of web application that the editing API runs under. Needs to be local.
eAPI=${e.api}

#Port on which the web application runs
port=${port}
		
#Switch to determine if in a restricted environment 
restricted=${env.restricted}
	
#Timeout constant
timeout=${timeout.constant}

#Passwords
pwdIsRandom=${pwd.israndom}
pwdHash=${pwd.hash}
authenticationType=${authentication.type}
		
#Features
devFeatureProv=${dev.feature.prov}
devFeatureGoogleAnalytics=${dev.feature.google.analytics}
devFeatureEditing=${dev.feature.editing}
	
#Schema locations
schemaURI=${schema.uri}

#PDF generation
pdfGenerationTaskCronExpression=${pdf.generator.scheduled.task.cron.interval}
pdfEnabled=${pdf.enabled}

#Version control
remoteRepoURL=${remote.repo.url}
remoteBranch=${remote.branch}
remoteUser=${remote.user}
remotePass=${remote.pass}
localBranch=${local.branch}
gitEnabled=${git.enabled}
numberOfCommitsToPushRemote=${number.of.commits.to.push.remote}
gitRemotePushCronExpression=${git.remote.push.cron.expression}
gitLocalCommitCronExpression=${git.local.commit.cron.expression}

#OAUTH2 Configuration  
clientId=${oauth2.clientId}
clientSecret=${oauth2.clientSecret}
accessTokenURL=${oauth2.accessTokenURL}
authURL=${oauth2.authURL}
tokenURL=${oauth2.tokenURL}
authCode=${oauth2.authCode}
preEstabledURL=${oauth2.preEstabledURL}
defaultFilterURL=${oauth2.defaultFilterURL}

# we are only requesting email from oath2. 
infoReq=${oauth2.infoReq}
personInfoURL=${oauth2.personInfoURL}